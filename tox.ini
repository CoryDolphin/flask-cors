[tox]
envlist =
    coverage-erase
    py{3.12, 3.11, 3.10, 3.9, 3.8}-{flask1,flask2,flask3}
    coverage-report

min_version = 4.4.4
skip_missing_interpreters = true
isolated_build = true
labels =
    update=update
    # These labels allow CI to specify only the target Python version
    # and rely on tox to generate all Flask combinations.
    py3.12=coverage-erase, py3.12-{flask1,flask2,flask3}, coverage-report-ci
    py3.11=coverage-erase, py3.11-{flask1,flask2,flask3}, coverage-report-ci
    py3.10=coverage-erase, py3.10-{flask1,flask2,flask3}, coverage-report-ci
    py3.9=coverage-erase, py3.9-{flask1,flask2,flask3}, coverage-report-ci
    py3.8=coverage-erase, py3.8-{flask1,flask2,flask3}, coverage-report-ci


[testenv:coverage-erase]
description = Erase .coverage* files before testing
skip_install = true
deps = coverage[toml]
commands = coverage erase


[testenv:py{3.12, 3.11, 3.10, 3.9, 3.8}-{flask1,flask2,flask3}]
description = Run the test suite ({env_name})
depends =
    coverage-erase
package = wheel
wheel_build_env = build_wheel
deps =
    -rrequirements/test/requirements.txt
    # Flask 1.x requirements
    flask1: flask >=1,<2
    flask1: markupsafe==2.0.1
    flask1: Jinja2==3.0.3
    flask1: itsdangerous==2.0.1
    flask1: werkzeug==2.0.3
    # Flask 2.x requirements
    flask2: flask >=2,<3
    # Flask 3.x requirements
    flask3: flask >=3,<4
commands = {envpython} -W error -m coverage run -m pytest


[testenv:coverage-report{,-ci}]
description = Report code coverage after testing
depends =
    py{3.12, 3.11, 3.10, 3.9, 3.8}-{flask1,flask2,flask3}
skip_install = true
deps = coverage[toml]
commands_pre =
    -coverage combine
commands =
    coverage report
commands_post =
    # Only output an HTML report when running locally.
    !ci: coverage html --fail-under=0


[testenv:update]
base_python = py3.12
recreate = true
description = Update test dependency versions
skip_install = true
deps =
    poetry
    poetry-plugin-export
commands =
    # Update test requirements
    poetry update --directory="requirements/test" --lock
    poetry export --directory="requirements/test" --output="requirements/test/requirements.txt" --without-hashes
